// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'crypto.dart';
import 'dart:async';
import 'dart:convert';
import 'error.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -656260519;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'fast_crypto',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateDecryptFile({required String inputPath, required String outputPath, required String password});

  Future<void> crateCryptoDecryptFileImpl(
      {required String inputPath, required String outputPath, required String password});

  String crateDecryptText({required String encryptedData, required String password});

  Future<String> crateCryptoDecryptTextImpl({required String encryptedData, required String password});

  Future<void> crateEncryptFile({required String inputPath, required String outputPath, required String password});

  Future<void> crateCryptoEncryptFileImpl(
      {required String inputPath, required String outputPath, required String password});

  String crateEncryptText({required String text, required String password});

  Future<String> crateCryptoEncryptTextImpl({required String text, required String password});

  Future<RsaKeyPair> crateGenerateRsaKeyPair({required int keySize});

  Future<RsaKeyPair> crateCryptoGenerateRsaKeyPairImpl({required int keySize});

  String crateGenerateSecureKey({required int length});

  Future<String> crateCryptoGenerateSecureKeyImpl({required int length});

  String crateHashText({required String text, required String algorithm});

  Future<String> crateCryptoHashTextImpl({required String text, required String algorithm});

  Future<void> crateInitApp();

  String crateRsaDecrypt({required String encryptedData, required String privateKeyPem});

  Future<String> crateCryptoRsaDecryptImpl({required String encryptedData, required String privateKeyPem});

  String crateRsaEncrypt({required String text, required String publicKeyPem});

  Future<String> crateCryptoRsaEncryptImpl({required String text, required String publicKeyPem});

  String crateRsaSign({required String text, required String privateKeyPem});

  Future<String> crateCryptoRsaSignImpl({required String text, required String privateKeyPem});

  bool crateRsaVerify({required String text, required String signature, required String publicKeyPem});

  Future<bool> crateCryptoRsaVerifyImpl(
      {required String text, required String signature, required String publicKeyPem});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateDecryptFile({required String inputPath, required String outputPath, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(inputPath, serializer);
        sse_encode_String(outputPath, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateDecryptFileConstMeta,
      argValues: [inputPath, outputPath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDecryptFileConstMeta => const TaskConstMeta(
        debugName: "decrypt_file",
        argNames: ["inputPath", "outputPath", "password"],
      );

  @override
  Future<void> crateCryptoDecryptFileImpl(
      {required String inputPath, required String outputPath, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(inputPath, serializer);
        sse_encode_String(outputPath, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoDecryptFileImplConstMeta,
      argValues: [inputPath, outputPath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoDecryptFileImplConstMeta => const TaskConstMeta(
        debugName: "decrypt_file_impl",
        argNames: ["inputPath", "outputPath", "password"],
      );

  @override
  String crateDecryptText({required String encryptedData, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encryptedData, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateDecryptTextConstMeta,
      argValues: [encryptedData, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDecryptTextConstMeta => const TaskConstMeta(
        debugName: "decrypt_text",
        argNames: ["encryptedData", "password"],
      );

  @override
  Future<String> crateCryptoDecryptTextImpl({required String encryptedData, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encryptedData, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoDecryptTextImplConstMeta,
      argValues: [encryptedData, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoDecryptTextImplConstMeta => const TaskConstMeta(
        debugName: "decrypt_text_impl",
        argNames: ["encryptedData", "password"],
      );

  @override
  Future<void> crateEncryptFile({required String inputPath, required String outputPath, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(inputPath, serializer);
        sse_encode_String(outputPath, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateEncryptFileConstMeta,
      argValues: [inputPath, outputPath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateEncryptFileConstMeta => const TaskConstMeta(
        debugName: "encrypt_file",
        argNames: ["inputPath", "outputPath", "password"],
      );

  @override
  Future<void> crateCryptoEncryptFileImpl(
      {required String inputPath, required String outputPath, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(inputPath, serializer);
        sse_encode_String(outputPath, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoEncryptFileImplConstMeta,
      argValues: [inputPath, outputPath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoEncryptFileImplConstMeta => const TaskConstMeta(
        debugName: "encrypt_file_impl",
        argNames: ["inputPath", "outputPath", "password"],
      );

  @override
  String crateEncryptText({required String text, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateEncryptTextConstMeta,
      argValues: [text, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateEncryptTextConstMeta => const TaskConstMeta(
        debugName: "encrypt_text",
        argNames: ["text", "password"],
      );

  @override
  Future<String> crateCryptoEncryptTextImpl({required String text, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoEncryptTextImplConstMeta,
      argValues: [text, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoEncryptTextImplConstMeta => const TaskConstMeta(
        debugName: "encrypt_text_impl",
        argNames: ["text", "password"],
      );

  @override
  Future<RsaKeyPair> crateGenerateRsaKeyPair({required int keySize}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(keySize, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_rsa_key_pair,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateGenerateRsaKeyPairConstMeta,
      argValues: [keySize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateGenerateRsaKeyPairConstMeta => const TaskConstMeta(
        debugName: "generate_rsa_key_pair",
        argNames: ["keySize"],
      );

  @override
  Future<RsaKeyPair> crateCryptoGenerateRsaKeyPairImpl({required int keySize}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(keySize, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_rsa_key_pair,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoGenerateRsaKeyPairImplConstMeta,
      argValues: [keySize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoGenerateRsaKeyPairImplConstMeta => const TaskConstMeta(
        debugName: "generate_rsa_key_pair_impl",
        argNames: ["keySize"],
      );

  @override
  String crateGenerateSecureKey({required int length}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(length, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateGenerateSecureKeyConstMeta,
      argValues: [length],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateGenerateSecureKeyConstMeta => const TaskConstMeta(
        debugName: "generate_secure_key",
        argNames: ["length"],
      );

  @override
  Future<String> crateCryptoGenerateSecureKeyImpl({required int length}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(length, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoGenerateSecureKeyImplConstMeta,
      argValues: [length],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoGenerateSecureKeyImplConstMeta => const TaskConstMeta(
        debugName: "generate_secure_key_impl",
        argNames: ["length"],
      );

  @override
  String crateHashText({required String text, required String algorithm}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(algorithm, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateHashTextConstMeta,
      argValues: [text, algorithm],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateHashTextConstMeta => const TaskConstMeta(
        debugName: "hash_text",
        argNames: ["text", "algorithm"],
      );

  @override
  Future<String> crateCryptoHashTextImpl({required String text, required String algorithm}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(algorithm, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoHashTextImplConstMeta,
      argValues: [text, algorithm],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoHashTextImplConstMeta => const TaskConstMeta(
        debugName: "hash_text_impl",
        argNames: ["text", "algorithm"],
      );

  @override
  Future<void> crateInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  String crateRsaDecrypt({required String encryptedData, required String privateKeyPem}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encryptedData, serializer);
        sse_encode_String(privateKeyPem, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateRsaDecryptConstMeta,
      argValues: [encryptedData, privateKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateRsaDecryptConstMeta => const TaskConstMeta(
        debugName: "rsa_decrypt",
        argNames: ["encryptedData", "privateKeyPem"],
      );

  @override
  Future<String> crateCryptoRsaDecryptImpl({required String encryptedData, required String privateKeyPem}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encryptedData, serializer);
        sse_encode_String(privateKeyPem, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoRsaDecryptImplConstMeta,
      argValues: [encryptedData, privateKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoRsaDecryptImplConstMeta => const TaskConstMeta(
        debugName: "rsa_decrypt_impl",
        argNames: ["encryptedData", "privateKeyPem"],
      );

  @override
  String crateRsaEncrypt({required String text, required String publicKeyPem}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(publicKeyPem, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateRsaEncryptConstMeta,
      argValues: [text, publicKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateRsaEncryptConstMeta => const TaskConstMeta(
        debugName: "rsa_encrypt",
        argNames: ["text", "publicKeyPem"],
      );

  @override
  Future<String> crateCryptoRsaEncryptImpl({required String text, required String publicKeyPem}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(publicKeyPem, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoRsaEncryptImplConstMeta,
      argValues: [text, publicKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoRsaEncryptImplConstMeta => const TaskConstMeta(
        debugName: "rsa_encrypt_impl",
        argNames: ["text", "publicKeyPem"],
      );

  @override
  String crateRsaSign({required String text, required String privateKeyPem}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(privateKeyPem, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateRsaSignConstMeta,
      argValues: [text, privateKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateRsaSignConstMeta => const TaskConstMeta(
        debugName: "rsa_sign",
        argNames: ["text", "privateKeyPem"],
      );

  @override
  Future<String> crateCryptoRsaSignImpl({required String text, required String privateKeyPem}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(privateKeyPem, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoRsaSignImplConstMeta,
      argValues: [text, privateKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoRsaSignImplConstMeta => const TaskConstMeta(
        debugName: "rsa_sign_impl",
        argNames: ["text", "privateKeyPem"],
      );

  @override
  bool crateRsaVerify({required String text, required String signature, required String publicKeyPem}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(signature, serializer);
        sse_encode_String(publicKeyPem, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateRsaVerifyConstMeta,
      argValues: [text, signature, publicKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateRsaVerifyConstMeta => const TaskConstMeta(
        debugName: "rsa_verify",
        argNames: ["text", "signature", "publicKeyPem"],
      );

  @override
  Future<bool> crateCryptoRsaVerifyImpl(
      {required String text, required String signature, required String publicKeyPem}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(signature, serializer);
        sse_encode_String(publicKeyPem, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_crypto_error,
      ),
      constMeta: kCrateCryptoRsaVerifyImplConstMeta,
      argValues: [text, signature, publicKeyPem],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateCryptoRsaVerifyImplConstMeta => const TaskConstMeta(
        debugName: "rsa_verify_impl",
        argNames: ["text", "signature", "publicKeyPem"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CryptoError dco_decode_crypto_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CryptoError_InvalidInput(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return CryptoError_EncryptionFailed(
          message: dco_decode_String(raw[1]),
        );
      case 2:
        return CryptoError_DecryptionFailed(
          message: dco_decode_String(raw[1]),
        );
      case 3:
        return CryptoError_KeyGenerationFailed(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return CryptoError_FileOperationFailed(
          message: dco_decode_String(raw[1]),
        );
      case 5:
        return CryptoError_HashFailed(
          message: dco_decode_String(raw[1]),
        );
      case 6:
        return CryptoError_RsaOperationFailed(
          message: dco_decode_String(raw[1]),
        );
      case 7:
        return CryptoError_SignatureVerificationFailed(
          message: dco_decode_String(raw[1]),
        );
      case 8:
        return CryptoError_UnsupportedAlgorithm(
          algorithm: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  RsaKeyPair dco_decode_rsa_key_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RsaKeyPair(
      privateKeyPem: dco_decode_String(arr[0]),
      publicKeyPem: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CryptoError sse_decode_crypto_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_InvalidInput(message: var_message);
      case 1:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_EncryptionFailed(message: var_message);
      case 2:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_DecryptionFailed(message: var_message);
      case 3:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_KeyGenerationFailed(message: var_message);
      case 4:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_FileOperationFailed(message: var_message);
      case 5:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_HashFailed(message: var_message);
      case 6:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_RsaOperationFailed(message: var_message);
      case 7:
        var var_message = sse_decode_String(deserializer);
        return CryptoError_SignatureVerificationFailed(message: var_message);
      case 8:
        var var_algorithm = sse_decode_String(deserializer);
        return CryptoError_UnsupportedAlgorithm(algorithm: var_algorithm);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  RsaKeyPair sse_decode_rsa_key_pair(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_privateKeyPem = sse_decode_String(deserializer);
    var var_publicKeyPem = sse_decode_String(deserializer);
    return RsaKeyPair(privateKeyPem: var_privateKeyPem, publicKeyPem: var_publicKeyPem);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_crypto_error(CryptoError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CryptoError_InvalidInput(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_EncryptionFailed(message: final message):
        sse_encode_i_32(1, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_DecryptionFailed(message: final message):
        sse_encode_i_32(2, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_KeyGenerationFailed(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_FileOperationFailed(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_HashFailed(message: final message):
        sse_encode_i_32(5, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_RsaOperationFailed(message: final message):
        sse_encode_i_32(6, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_SignatureVerificationFailed(message: final message):
        sse_encode_i_32(7, serializer);
        sse_encode_String(message, serializer);
      case CryptoError_UnsupportedAlgorithm(algorithm: final algorithm):
        sse_encode_i_32(8, serializer);
        sse_encode_String(algorithm, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_rsa_key_pair(RsaKeyPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.privateKeyPem, serializer);
    sse_encode_String(self.publicKeyPem, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
