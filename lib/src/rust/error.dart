// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'error.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`

@freezed
sealed class CryptoError with _$CryptoError implements FrbException {
  const CryptoError._();

  /// Invalid input parameters
  const factory CryptoError.invalidInput({
    required String message,
  }) = CryptoError_InvalidInput;

  /// Encryption operation failed
  const factory CryptoError.encryptionFailed({
    required String message,
  }) = CryptoError_EncryptionFailed;

  /// Decryption operation failed
  const factory CryptoError.decryptionFailed({
    required String message,
  }) = CryptoError_DecryptionFailed;

  /// Key generation failed
  const factory CryptoError.keyGenerationFailed({
    required String message,
  }) = CryptoError_KeyGenerationFailed;

  /// File operation failed
  const factory CryptoError.fileOperationFailed({
    required String message,
  }) = CryptoError_FileOperationFailed;

  /// Hash operation failed
  const factory CryptoError.hashFailed({
    required String message,
  }) = CryptoError_HashFailed;

  /// RSA operation failed
  const factory CryptoError.rsaOperationFailed({
    required String message,
  }) = CryptoError_RsaOperationFailed;

  /// Signature verification failed
  const factory CryptoError.signatureVerificationFailed({
    required String message,
  }) = CryptoError_SignatureVerificationFailed;

  /// Unsupported algorithm
  const factory CryptoError.unsupportedAlgorithm({
    required String algorithm,
  }) = CryptoError_UnsupportedAlgorithm;
}
